{"version":3,"sources":["components/Button/index.jsx","components/Wrapper/index.jsx","components/Title/index.jsx","components/Link/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","styled","button","_templateObject","props","primary","css","_templateObject2","TomatoButton","_templateObject3","ReversedButton","react_default","a","createElement","Object","assign","children","split","reverse","Wrapper","section","Wrapper_templateObject","Container","div","Wrapper_templateObject2","Title","h1","Title_templateObject","Introduction","h4","Title_templateObject2","Link","_ref","className","rest","objectWithoutProperties","Link_templateObject","StyledLink","Link_templateObject2","App","as","href","target","role","aria-label","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u9BAKA,IAAMA,EAASC,IAAOC,OAAVC,IAWR,SAAAC,GAAK,OACLA,EAAMC,SACNC,YADAC,OAYEC,EAAeP,YAAOD,EAAPC,CAAHQ,KASZC,EAAiB,SAAAN,GAAK,OAC1BO,EAAAC,EAAAC,cAAA,SAAAC,OAAAC,OAAA,GAAYX,EAAZ,CAAmBY,SAAUZ,EAAMY,SAASC,MAAM,IAAIC,iPCtCjD,IAAMC,EAAUlB,IAAOmB,QAAVC,KAKPC,EAAYrB,IAAOsB,IAAVC,mRCLf,IAAMC,EAAQxB,IAAOyB,GAAVC,KAMLC,EAAe3B,IAAO4B,GAAVC,+OCFzB,IAMaC,EAAO9B,YANE,SAAA+B,GAAA,IAAGC,EAAHD,EAAGC,UAAWjB,EAAdgB,EAAchB,SAAakB,EAA3BpB,OAAAqB,EAAA,EAAArB,CAAAkB,EAAA,iCACpBrB,EAAAC,EAAAC,cAAA,IAAAC,OAAAC,OAAA,CAAGkB,UAAWA,GAAeC,GAC1BlB,IAIef,CAAHmC,KAKJC,EAAapC,YAAO8B,EAAP9B,CAAHqC,KCkCRC,mLAxCX,OACE5B,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAACM,EAAD,KACER,EAAAC,EAAAC,cAACY,EAAD,6BACuBd,EAAAC,EAAAC,cAAA,kCAEvBF,EAAAC,EAAAC,cAACS,EAAD,KACEX,EAAAC,EAAAC,cAACe,EAAD,kBACAjB,EAAAC,EAAAC,cAACb,EAAD,sBACAW,EAAAC,EAAAC,cAACb,EAAD,CAAQK,SAAO,GAAf,kBACAM,EAAAC,EAAAC,cAACL,EAAD,sBACAG,EAAAC,EAAAC,cAACb,EAAD,CAAQwC,GAAG,IAAIC,KAAK,IAAIC,OAAO,UAA/B,2BAGA/B,EAAAC,EAAAC,cAACL,EAAD,CAAcgC,GAAG,IAAIC,KAAK,IAAIC,OAAO,UAArC,2BAGA/B,EAAAC,EAAAC,cAACb,EAAD,CAAQwC,GAAI9B,GAAZ,oBAEFC,EAAAC,EAAAC,cAACS,EAAD,KACEX,EAAAC,EAAAC,cAACe,EAAD,sCACAjB,EAAAC,EAAAC,cAACkB,EAAD,CAAMU,KAAK,KAAX,wBAEE9B,EAAAC,EAAAC,cAAA,QAAM8B,KAAK,MAAMC,aAAW,UAA5B,iBAIFjC,EAAAC,EAAAC,cAACwB,EAAD,CAAYI,KAAK,KAAjB,wBAEE9B,EAAAC,EAAAC,cAAA,QAAM8B,KAAK,MAAMC,aAAW,SAA5B,2BA/BIC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fd4e1007.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nimport React from \"react\";\n\n// Use styled with props to define a styled button\nconst Button = styled.button`\n  display: inline-block;\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  margin: 0.5em;\n  padding: 1em;\n  text-decoration: none;\n  cursor: pointer;\n  outline: none;\n\n  ${props =>\n    props.primary &&\n    css`\n      background: palevioletred;\n      color: white;\n    `};\n  &:focus {\n    border-color: #ff007f;\n    box-shadow: 3px 3px 5px #ff007f;\n  }\n`;\n\n// Extends Button\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n  &:focus {\n    border-color: #ff5500;\n    box-shadow: 3px 3px 5px #ff5500;\n  }\n`;\n\nconst ReversedButton = props => (\n  <button {...props} children={props.children.split(\"\").reverse()} />\n);\n\nexport { Button, TomatoButton, ReversedButton };\n","import styled from \"styled-components\";\nexport const Wrapper = styled.section`\n  padding: 4em;\n  background: papayawhip;\n`;\n\nexport const Container = styled.div`\n  padding: 1em;\n  background: inherit;\n`;\n","import styled from \"styled-components\";\nexport const Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\nexport const Introduction = styled.h4`\n  font-size: 1em;\n  text-align: left;\n  color: #ff5500;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n// styled will return a StyledComponent\n// which exposed a className for us\nconst LinkComponent = ({ className, children, ...rest }) => (\n  <a className={className} {...rest}>\n    {children}\n  </a>\n);\n\nexport const Link = styled(LinkComponent)`\n  display: block;\n  margin: 0.5em;\n`;\n\nexport const StyledLink = styled(Link)`\n  color: palevioletred;\n  font-weight: bold;\n`;\n","import \"./App.css\";\n\nimport { Button, ReversedButton, TomatoButton } from \"./components/Button\";\nimport { Container, Wrapper } from \"./components/Wrapper\";\nimport { Introduction, Title } from \"./components/Title\";\nimport { Link, StyledLink } from \"./components/Link\";\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Wrapper>\n          <Title>\n            Getting started with <code>styled-components</code>\n          </Title>\n          <Container>\n            <Introduction>1.Buttons</Introduction>\n            <Button>Normal Button</Button>\n            <Button primary>Primary Button</Button>\n            <TomatoButton>Tomato Button</TomatoButton>\n            <Button as=\"a\" href=\"/\" target=\"_blank\">\n              Link with Normal Button\n            </Button>\n            <TomatoButton as=\"a\" href=\"/\" target=\"_blank\">\n              Link with Tomato Button\n            </TomatoButton>\n            <Button as={ReversedButton}>Reserved Button</Button>\n          </Container>\n          <Container>\n            <Introduction>2.Links with Custom Component</Introduction>\n            <Link href=\"/\">\n              Unstyled, boring Link\n              <span role=\"img\" aria-label=\"boring\">\n                üòí\n              </span>\n            </Link>\n            <StyledLink href=\"/\">\n              Styled, exciting Link\n              <span role=\"img\" aria-label=\"loved\">\n                üòç\n              </span>\n            </StyledLink>\n          </Container>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}